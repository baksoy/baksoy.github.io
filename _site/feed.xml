<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Concepts</title>
    <description>Jekyll Theme Demo
</description>
    <link>//</link>
    <atom:link href="//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 19 Nov 2015 19:22:57 -0500</pubDate>
    <lastBuildDate>Thu, 19 Nov 2015 19:22:57 -0500</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>How Web Applications Work</title>
        <description>&lt;h2&gt;1 - HTTP&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HTTP Protocol&lt;/strong&gt; is a &lt;strong&gt;Request&lt;/strong&gt; and &lt;strong&gt;Response&lt;/strong&gt; protocol and the communication between a web application client such as a web browser and a web application such as Apache Tomcat server works as follows:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client first establishes a connection with the server.&lt;/li&gt;
&lt;li&gt;After the connection is established, the client sends the web server a &lt;strong&gt;Request&lt;/strong&gt;. This request has details of what operations the client wants.&lt;/li&gt;
&lt;li&gt;The web Server responds with a &lt;strong&gt;Response&lt;/strong&gt; back to the web client. Content of the response has what was requested and &lt;strong&gt;status&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Finally, the connection gets closed. It&amp;#39;s important to note that the web server doesnâ€™t remember anything about the past connections and who the clients were. This means that another request coming from the same client is treated as a new request coming from a new client. Because of this, the &lt;strong&gt;HTTP&lt;/strong&gt; protocol is called a &lt;strong&gt;stateless protocol&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one pair of HTTP Request and Response is called an &lt;strong&gt;HTTP Transaction&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;2 - URL&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s disect the following example URL to understand the pieces:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;http://www.example.com:8080/2015/10/15/up-and-running.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http&lt;/code&gt; - this is the &lt;strong&gt;scheme&lt;/strong&gt; of the above URL. Some other popular schemes are &lt;em&gt;ftp&lt;/em&gt;, &lt;em&gt;mailto&lt;/em&gt;, &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;data&lt;/em&gt;. Schemes indicate how to access the resource that follows, in this case it indicates to access the resource via the http protocol.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mailto:someone@gmail.com&lt;/code&gt; - URL scheme of this one is mailto but mailto is not a protocol. So, URL&amp;#39;s may have different schemes and they may not necessarily be protocols.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;www.example.com&lt;/code&gt; - this portion is the &lt;strong&gt;host&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;8080&lt;/code&gt; - this is the &lt;strong&gt;port&lt;/strong&gt;. Requests from this port is routed to the application that is set up to handle requests coming from this port.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2015/10/15/up-and-running.html&lt;/code&gt; - this is the &lt;strong&gt;URL path&lt;/strong&gt;. The web server uses this to identify the resource.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;www.example.com/some-folder/?couponCode=OFFER39&lt;/code&gt; - the part that comes after the &lt;strong&gt;?&lt;/strong&gt; is the &lt;strong&gt;query string&lt;/strong&gt;. This string is passed to the web server. This is the &lt;strong&gt;name value pair&lt;/strong&gt; that is passed on to the web server for processing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;www.example.com/some-folder/?couponCode=OFFER39#discussions&lt;/code&gt; - what comes after # is a &lt;strong&gt;fragment&lt;/strong&gt;. It is like a bookmark in a resource - for example an &lt;em&gt;id of an element&lt;/em&gt; in an html document. The sole purpose of a fragment in a URL is to show a particular portion of a resource at the client side. The fragment is not passed to the web server, because the web server returns the entire resource as a single unit - so the server does not need the fragment to process the information.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Nov 2015 09:34:52 -0500</pubDate>
        <link>//java/update/2015/11/06/how-webapps-work.html</link>
        <guid isPermaLink="true">//java/update/2015/11/06/how-webapps-work.html</guid>
        
        
        <category>java</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
